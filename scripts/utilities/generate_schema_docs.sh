#!/usr/bin/env bash
# =====================================================
# EuroStyle Schema Documentation Generator
# =====================================================
# Generates always-current documentation from the live database
# so WARP.md never goes stale with schema information

set -euo pipefail

# ClickHouse client command
CH_CLI="docker exec -i eurostyle_clickhouse_retail clickhouse-client"

# Output files
SCHEMA_DOC="docs/SCHEMA.md"
MAPPING_DOC="docs/CSV_MAPPINGS.md"

# Color codes
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() {
  echo -e "${GREEN}[INFO]${NC} $1"
}

# Check if ClickHouse container is running
check_clickhouse() {
  if ! docker ps --format "table {{.Names}}" | grep -q "eurostyle_clickhouse_retail"; then
    echo -e "\033[0;31m[ERROR]\033[0m ClickHouse container 'eurostyle_clickhouse_retail' is not running"
    echo -e "\033[0;32m[INFO]\033[0m Start it with: ./eurostyle.sh start"
    exit 1
  fi
}

# Generate schema documentation from live database
generate_schema_docs() {
  local output="$1"
  
  log_info "Generating schema documentation: $output"
  
  # Create docs directory if it doesn't exist
  mkdir -p "$(dirname "$output")"
  
  {
    echo "# EuroStyle Database Schemas"
    echo
    echo "_Auto-generated from live database on $(date '+%Y-%m-%d %H:%M:%S')_  "
    echo "_Do not edit this file manually - regenerate with: ./scripts/utilities/generate_schema_docs.sh_"
    echo
    echo "## Overview"
    echo
    echo "The EuroStyle Retail Demo platform uses a 5-database architecture:"
    echo
    
    databases=("eurostyle_operational" "eurostyle_webshop" "eurostyle_finance" "eurostyle_hr" "eurostyle_pos")
    
    for db in "${databases[@]}"; do
      # Check if database exists
      db_exists=$($CH_CLI --query "SELECT count() FROM system.databases WHERE name='$db'" 2>/dev/null || echo "0")
      
      if [ "$db_exists" = "0" ]; then
        echo "- **${db}**: ❌ Not Found"
      else
        table_count=$($CH_CLI --query "SELECT count() FROM system.tables WHERE database='$db'" 2>/dev/null || echo "0")
        echo "- **${db}**: ✅ ${table_count} tables"
      fi
    done
    
    echo
    echo "## Database Details"
    echo
    
    for db in "${databases[@]}"; do
      echo "### ${db}"
      echo
      
      # Check if database exists
      db_exists=$($CH_CLI --query "SELECT count() FROM system.databases WHERE name='$db'" 2>/dev/null || echo "0")
      
      if [ "$db_exists" = "0" ]; then
        echo "❌ **Database not found**"
        echo
        continue
      fi
      
      # Get table information
      tables=$($CH_CLI --query "SELECT name FROM system.tables WHERE database='$db' ORDER BY name" 2>/dev/null || echo "")
      
      if [ -z "$tables" ]; then
        echo "No tables found in this database."
        echo
        continue
      fi
      
      echo "#### Tables"
      echo
      
      # List tables with row counts
      while IFS= read -r table; do
        if [ -n "$table" ]; then
          count=$($CH_CLI --query "SELECT count(*) FROM ${db}.${table}" 2>/dev/null || echo "0")
          echo "- **$table** ($count records)"
        fi
      done <<< "$tables"
      
      echo
      
      # Show detailed schema for each table
      echo "#### Table Schemas"
      echo
      
      while IFS= read -r table; do
        if [ -n "$table" ]; then
          echo "##### ${db}.${table}"
          echo
          echo "\`\`\`sql"
          $CH_CLI --query "SHOW CREATE TABLE ${db}.${table}" 2>/dev/null | sed 's/^//' || echo "-- Schema not available"
          echo "\`\`\`"
          echo
          
          # Show column details in table format
          echo "**Columns:**"
          echo
          echo "| Position | Name | Type | Default |"
          echo "|----------|------|------|---------|"
          
          $CH_CLI --query "
          SELECT 
              position,
              name,
              type,
              CASE 
                  WHEN default_kind = '' THEN '-'
                  ELSE concat(default_kind, '(', default_expression, ')')
              END as default_info
          FROM system.columns 
          WHERE database='$db' AND table='$table'
          ORDER BY position
          " 2>/dev/null | while IFS=$'\t' read -r pos name type default_info; do
            echo "| $pos | \`$name\` | \`$type\` | $default_info |"
          done 2>/dev/null || echo "| - | - | - | - |"
          
          echo
        fi
      done <<< "$tables"
    done
    
    echo "## Cross-Database Relationships"
    echo
    echo "Key foreign key relationships across databases:"
    echo
    echo "- \`eurostyle_hr.employees.entity_id\` → \`eurostyle_finance.legal_entities.entity_id\`"
    echo "- \`eurostyle_operational.orders.customer_id\` → \`eurostyle_operational.customers.customer_id\`"
    echo "- \`eurostyle_webshop.web_sessions.customer_id\` → \`eurostyle_operational.customers.customer_id\`"
    echo "- \`eurostyle_pos.transactions.store_id\` → \`eurostyle_operational.stores.store_id\`"
    echo
    echo "## Usage"
    echo
    echo "Use the schema inspector to query this information interactively:"
    echo
    echo "\`\`\`bash"
    echo "# Quick table overview"
    echo "./scripts/utilities/schema_inspect.sh system:overview"
    echo
    echo "# Row counts across all databases"
    echo "./scripts/utilities/schema_inspect.sh system:counts"
    echo
    echo "# Specific database details"
    echo "./scripts/utilities/schema_inspect.sh db:tables eurostyle_operational"
    echo "./scripts/utilities/schema_inspect.sh db:counts eurostyle_operational"
    echo
    echo "# Table details"
    echo "./scripts/utilities/schema_inspect.sh table:describe eurostyle_operational orders"
    echo "\`\`\`"
    
  } > "$output"
}

# Generate CSV mapping documentation
generate_csv_mapping_docs() {
  local output="$1"
  
  log_info "Generating CSV mapping documentation: $output"
  
  # Create docs directory if it doesn't exist
  mkdir -p "$(dirname "$output")"
  
  {
    echo "# EuroStyle CSV Column Mappings"
    echo
    echo "_Auto-generated documentation on $(date '+%Y-%m-%d %H:%M:%S')_  "
    echo "_Do not edit this file manually - regenerate with: ./scripts/utilities/generate_schema_docs.sh_"
    echo
    echo "## Overview"
    echo
    echo "This document shows the expected CSV file structures for the EuroStyle data generation system."
    echo "All CSV files follow the naming convention: \`{database}.{table}.csv.gz\`"
    echo
    echo "## CSV File Formats"
    echo
    
    # Check if config/mappings directory exists
    if [ -d "config/mappings" ]; then
      echo "### Configuration-Based Mappings"
      echo
      echo "CSV mappings are defined in \`config/mappings/\` YAML files:"
      echo
      
      for mapping_file in config/mappings/*.yaml; do
        if [ -f "$mapping_file" ]; then
          echo "- \`$(basename "$mapping_file")\`"
        fi
      done
      echo
    fi
    
    echo "### Current Database Tables and Expected CSV Columns"
    echo
    
    databases=("eurostyle_operational" "eurostyle_webshop" "eurostyle_finance" "eurostyle_hr" "eurostyle_pos")
    
    for db in "${databases[@]}"; do
      echo "#### $db"
      echo
      
      # Check if database exists
      db_exists=$($CH_CLI --query "SELECT count() FROM system.databases WHERE name='$db'" 2>/dev/null || echo "0")
      
      if [ "$db_exists" = "0" ]; then
        echo "❌ **Database not found**"
        echo
        continue
      fi
      
      # Get tables
      tables=$($CH_CLI --query "SELECT name FROM system.tables WHERE database='$db' ORDER BY name" 2>/dev/null || echo "")
      
      while IFS= read -r table; do
        if [ -n "$table" ]; then
          echo "##### ${db}.${table}.csv.gz"
          echo
          echo "Expected CSV columns (based on database schema):"
          echo
          echo "\`\`\`csv"
          echo -n "# Column headers: "
          $CH_CLI --query "SELECT name FROM system.columns WHERE database='$db' AND table='$table' ORDER BY position" 2>/dev/null | paste -sd "," - || echo "# Schema not available"
          echo "\`\`\`"
          echo
          
          # Show column details
          echo "| Column | Type | Nullable | Description |"
          echo "|--------|------|----------|-------------|"
          
          $CH_CLI --query "
          SELECT 
              name,
              type,
              CASE WHEN is_nullable THEN 'Yes' ELSE 'No' END as nullable,
              '' as description
          FROM system.columns 
          WHERE database='$db' AND table='$table'
          ORDER BY position
          " 2>/dev/null | while IFS=$'\t' read -r name type nullable desc; do
            echo "| \`$name\` | \`$type\` | $nullable | $desc |"
          done 2>/dev/null || echo "| - | - | - | - |"
          
          echo
        fi
      done <<< "$tables"
    done
    
    echo "## CSV Inspection Commands"
    echo
    echo "Use the schema inspector to check CSV file headers:"
    echo
    echo "\`\`\`bash"
    echo "# Check CSV column headers"
    echo "./scripts/utilities/schema_inspect.sh csv:columns data/csv/eurostyle_operational.customers.csv.gz"
    echo "./scripts/utilities/schema_inspect.sh csv:columns data/csv/eurostyle_hr.employees.csv.gz"
    echo
    echo "# Compare with database schema"
    echo "./scripts/utilities/schema_inspect.sh table:describe eurostyle_operational customers"
    echo "\`\`\`"
    echo
    echo "## Validation"
    echo
    echo "Use the CSV header validator before loading data:"
    echo
    echo "\`\`\`bash"
    echo "# Validate CSV headers match database schema (when available)"
    echo "./scripts/validation/validate_csv_headers.py data/csv/file.csv.gz config/mappings/mapping.yaml table_name"
    echo "\`\`\`"
    
  } > "$output"
}

# Main execution
main() {
  case "${1:-all}" in
    schema)
      check_clickhouse
      generate_schema_docs "$SCHEMA_DOC"
      log_info "Schema documentation generated: $SCHEMA_DOC"
      ;;
    csv)
      check_clickhouse
      generate_csv_mapping_docs "$MAPPING_DOC"
      log_info "CSV mapping documentation generated: $MAPPING_DOC"
      ;;
    all|*)
      check_clickhouse
      generate_schema_docs "$SCHEMA_DOC"
      generate_csv_mapping_docs "$MAPPING_DOC"
      log_info "All documentation generated:"
      log_info "  - Schema: $SCHEMA_DOC"
      log_info "  - CSV Mappings: $MAPPING_DOC"
      ;;
  esac
}

main "$@"